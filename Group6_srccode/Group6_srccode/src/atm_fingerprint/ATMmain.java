/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atm_fingerprint;

import java.io.File;
import java.io.FileOutputStream;
import MFS100.DeviceInfo;
import MFS100.FingerData;
import MFS100.MFS100;
import MFS100.MFS100Event;
import com.mysql.jdbc.PreparedStatement;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Blob;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

// SQL Import statements
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NS
 */
public class ATMmain extends javax.swing.JFrame implements MFS100Event {

    /**
     * Creates new form ATMmain
     */
    String appTitle = "Fingerprint Authentication";
    String key = "";
    MFS100 mfs100 = null;
    int quality = 60;
    int timeout = 10000;
    byte[] ISOTemplate = null;
    byte[] ANSITemplate = null;

    Connection conn;

    boolean fingerprintAuthenticated = false;

    String filePath = "";

    Thread trd;

    public ATMmain() throws ClassNotFoundException, SQLException {
        initComponents();
        filePath = System.getProperty("user.dir");
        filePath += "\\AnsiTemplate.ansi";
        mfs100 = new MFS100(this, key);
        initDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Heading = new javax.swing.JLabel();
        mainPanel = new javax.swing.JLayeredPane();
        Authentication = new javax.swing.JPanel();
        loginName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nextBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        navToSignup = new javax.swing.JLabel();
        Signup = new javax.swing.JPanel();
        userNameSignup = new javax.swing.JTextField();
        addFingerprint = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        createAcccountBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        navToLogin = new javax.swing.JLabel();
        home = new javax.swing.JPanel();
        welcomeText = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        withdrawalBtn = new javax.swing.JButton();
        viewBalanceBtn = new javax.swing.JButton();
        viewTransactionBtn = new javax.swing.JButton();
        transferBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        withDrawalPanel = new javax.swing.JPanel();
        withdrawAmount = new javax.swing.JTextField();
        navToHome = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        withdrawConformedBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        navToSignup1 = new javax.swing.JLabel();
        moneyTransferPanel = new javax.swing.JPanel();
        transferAccountName = new javax.swing.JTextField();
        navToHome1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        transferConformedBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        navToSignup2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        transferAmount = new javax.swing.JTextField();
        lastTransactions = new javax.swing.JPanel();
        navToHome2 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lastTransactionTable = new javax.swing.JTable();
        fingerPrintCheckPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        backBtnAuth = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        hiddenField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Heading.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Heading.setText("Fingerprint Authentication - ATM");

        mainPanel.setLayout(new java.awt.CardLayout());

        loginName.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        loginName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        loginName.setToolTipText("Username");
        loginName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginNameActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel2.setText("Login");

        nextBtn.setBackground(new java.awt.Color(0, 204, 0));
        nextBtn.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        nextBtn.setText("Next >");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(143, 143, 152));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setLabelFor(home);
        jLabel3.setText("Enter your username");
        jLabel3.setToolTipText("");

        navToSignup.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        navToSignup.setForeground(new java.awt.Color(77, 77, 223));
        navToSignup.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navToSignup.setLabelFor(home);
        navToSignup.setText("Click here to create a new account");
        navToSignup.setToolTipText("");
        navToSignup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        navToSignup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                navToSignupMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout AuthenticationLayout = new javax.swing.GroupLayout(Authentication);
        Authentication.setLayout(AuthenticationLayout);
        AuthenticationLayout.setHorizontalGroup(
            AuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthenticationLayout.createSequentialGroup()
                .addContainerGap(386, Short.MAX_VALUE)
                .addGroup(AuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(loginName, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addGroup(AuthenticationLayout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addGroup(AuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthenticationLayout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(487, 487, 487))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthenticationLayout.createSequentialGroup()
                                    .addComponent(navToSignup)
                                    .addGap(400, 400, 400)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthenticationLayout.createSequentialGroup()
                        .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(438, 438, 438))))
        );
        AuthenticationLayout.setVerticalGroup(
            AuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthenticationLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel2)
                .addGap(92, 92, 92)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(loginName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(nextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(navToSignup, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        mainPanel.add(Authentication, "card2");

        userNameSignup.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        userNameSignup.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        userNameSignup.setToolTipText("Username");
        userNameSignup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameSignupActionPerformed(evt);
            }
        });

        addFingerprint.setBackground(new java.awt.Color(255, 255, 255));
        addFingerprint.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        addFingerprint.setText("Add Fingerprint");
        addFingerprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFingerprintActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Create an Account");

        createAcccountBtn.setBackground(new java.awt.Color(0, 255, 0));
        createAcccountBtn.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        createAcccountBtn.setText("Create Account");
        createAcccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAcccountBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(143, 143, 152));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setLabelFor(home);
        jLabel6.setText("Place your fingerand press add fingerprint button");
        jLabel6.setToolTipText("");

        navToLogin.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        navToLogin.setForeground(new java.awt.Color(77, 77, 223));
        navToLogin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navToLogin.setLabelFor(home);
        navToLogin.setText("Click here to login");
        navToLogin.setToolTipText("");
        navToLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        navToLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                navToLoginMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout SignupLayout = new javax.swing.GroupLayout(Signup);
        Signup.setLayout(SignupLayout);
        SignupLayout.setHorizontalGroup(
            SignupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignupLayout.createSequentialGroup()
                .addContainerGap(378, Short.MAX_VALUE)
                .addGroup(SignupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SignupLayout.createSequentialGroup()
                        .addGroup(SignupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addFingerprint, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameSignup, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(364, 364, 364))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SignupLayout.createSequentialGroup()
                        .addGroup(SignupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(createAcccountBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(navToLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(441, 441, 441))))
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        SignupLayout.setVerticalGroup(
            SignupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SignupLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel5)
                .addGap(75, 75, 75)
                .addComponent(userNameSignup, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(addFingerprint, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(53, 53, 53)
                .addComponent(createAcccountBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(navToLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        mainPanel.add(Signup, "card2");

        welcomeText.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        welcomeText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeText.setText("Welcome, ");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel4.setText("What would you like to do?");

        withdrawalBtn.setBackground(new java.awt.Color(255, 255, 255));
        withdrawalBtn.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        withdrawalBtn.setText("Withdrawal");
        withdrawalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawalBtnActionPerformed(evt);
            }
        });

        viewBalanceBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewBalanceBtn.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        viewBalanceBtn.setText("View Balance");
        viewBalanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBalanceBtnActionPerformed(evt);
            }
        });

        viewTransactionBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewTransactionBtn.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        viewTransactionBtn.setText("View Transactions");
        viewTransactionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTransactionBtnActionPerformed(evt);
            }
        });

        transferBtn.setBackground(new java.awt.Color(255, 255, 255));
        transferBtn.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        transferBtn.setText("Money Transfer");
        transferBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferBtnActionPerformed(evt);
            }
        });

        logoutBtn.setBackground(new java.awt.Color(255, 0, 0));
        logoutBtn.setForeground(new java.awt.Color(255, 255, 255));
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homeLayout = new javax.swing.GroupLayout(home);
        home.setLayout(homeLayout);
        homeLayout.setHorizontalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(welcomeText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homeLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(homeLayout.createSequentialGroup()
                        .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewTransactionBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(withdrawalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(199, 199, 199)
                        .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewBalanceBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transferBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(homeLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(63, 63, 63)
                        .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(265, 265, 265))
        );
        homeLayout.setVerticalGroup(
            homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeText)
                .addGap(31, 31, 31)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(withdrawalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBalanceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(114, 114, 114)
                .addGroup(homeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewTransactionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transferBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(home, "card4");

        withdrawAmount.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        withdrawAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        withdrawAmount.setToolTipText("Username");
        withdrawAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawAmountActionPerformed(evt);
            }
        });

        navToHome.setBackground(new java.awt.Color(255, 0, 0));
        navToHome.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        navToHome.setForeground(new java.awt.Color(255, 255, 255));
        navToHome.setText("< Home");
        navToHome.setBorder(null);
        navToHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navToHomeActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel7.setText("Withdrawal");

        withdrawConformedBtn.setBackground(new java.awt.Color(0, 255, 0));
        withdrawConformedBtn.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        withdrawConformedBtn.setText("Withdraw");
        withdrawConformedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawConformedBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(143, 143, 152));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setLabelFor(home);
        jLabel8.setText("Enter the amount");
        jLabel8.setToolTipText("");

        navToSignup1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        navToSignup1.setForeground(new java.awt.Color(77, 77, 223));
        navToSignup1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navToSignup1.setLabelFor(home);
        navToSignup1.setText("Cancel");
        navToSignup1.setToolTipText("");
        navToSignup1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        navToSignup1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                navToSignup1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout withDrawalPanelLayout = new javax.swing.GroupLayout(withDrawalPanel);
        withDrawalPanel.setLayout(withDrawalPanelLayout);
        withDrawalPanelLayout.setHorizontalGroup(
            withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(withDrawalPanelLayout.createSequentialGroup()
                .addContainerGap(378, Short.MAX_VALUE)
                .addGroup(withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, withDrawalPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(141, 141, 141)
                        .addComponent(navToHome, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(251, 251, 251))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, withDrawalPanelLayout.createSequentialGroup()
                        .addGroup(withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(withDrawalPanelLayout.createSequentialGroup()
                                    .addComponent(withdrawConformedBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(navToSignup1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(withdrawAmount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(355, 355, 355))))
        );
        withDrawalPanelLayout.setVerticalGroup(
            withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(withDrawalPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(navToHome, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(withdrawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(withDrawalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(withdrawConformedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(navToSignup1))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        mainPanel.add(withDrawalPanel, "card2");

        transferAccountName.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        transferAccountName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        transferAccountName.setToolTipText("Username");
        transferAccountName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferAccountNameActionPerformed(evt);
            }
        });

        navToHome1.setBackground(new java.awt.Color(255, 0, 0));
        navToHome1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        navToHome1.setForeground(new java.awt.Color(255, 255, 255));
        navToHome1.setText("< Home");
        navToHome1.setBorder(null);
        navToHome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navToHome1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel9.setText("Money Transfer");

        transferConformedBtn.setBackground(new java.awt.Color(0, 255, 0));
        transferConformedBtn.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        transferConformedBtn.setText("Transfer");
        transferConformedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferConformedBtnActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(143, 143, 152));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setLabelFor(home);
        jLabel10.setText("Enter the account name");
        jLabel10.setToolTipText("");

        navToSignup2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        navToSignup2.setForeground(new java.awt.Color(77, 77, 223));
        navToSignup2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navToSignup2.setLabelFor(home);
        navToSignup2.setText("Cancel");
        navToSignup2.setToolTipText("");
        navToSignup2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        navToSignup2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                navToSignup2MouseClicked(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(143, 143, 152));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setLabelFor(home);
        jLabel11.setText("Enter the amount");
        jLabel11.setToolTipText("");

        transferAmount.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        transferAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        transferAmount.setToolTipText("Username");
        transferAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moneyTransferPanelLayout = new javax.swing.GroupLayout(moneyTransferPanel);
        moneyTransferPanel.setLayout(moneyTransferPanelLayout);
        moneyTransferPanelLayout.setHorizontalGroup(
            moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moneyTransferPanelLayout.createSequentialGroup()
                .addContainerGap(378, Short.MAX_VALUE)
                .addGroup(moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moneyTransferPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(109, 109, 109)
                        .addComponent(navToHome1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(251, 251, 251))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moneyTransferPanelLayout.createSequentialGroup()
                        .addGroup(moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(moneyTransferPanelLayout.createSequentialGroup()
                                    .addComponent(transferConformedBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(navToSignup2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(transferAccountName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addComponent(transferAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(355, 355, 355))))
        );
        moneyTransferPanelLayout.setVerticalGroup(
            moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moneyTransferPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(navToHome1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transferAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transferAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(moneyTransferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transferConformedBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(navToSignup2))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        mainPanel.add(moneyTransferPanel, "card2");

        navToHome2.setBackground(new java.awt.Color(255, 0, 0));
        navToHome2.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        navToHome2.setForeground(new java.awt.Color(255, 255, 255));
        navToHome2.setText("< Home");
        navToHome2.setBorder(null);
        navToHome2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navToHome2ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel12.setText("Your Transactions");

        lastTransactionTable.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lastTransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Action", "Amount", "Date", "From Name", "To Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lastTransactionTable.setFocusable(false);
        lastTransactionTable.setRowHeight(25);
        lastTransactionTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(lastTransactionTable);

        javax.swing.GroupLayout lastTransactionsLayout = new javax.swing.GroupLayout(lastTransactions);
        lastTransactions.setLayout(lastTransactionsLayout);
        lastTransactionsLayout.setHorizontalGroup(
            lastTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastTransactionsLayout.createSequentialGroup()
                .addGroup(lastTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lastTransactionsLayout.createSequentialGroup()
                        .addGap(454, 454, 454)
                        .addComponent(jLabel12)
                        .addGap(61, 61, 61)
                        .addComponent(navToHome2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(lastTransactionsLayout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        lastTransactionsLayout.setVerticalGroup(
            lastTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastTransactionsLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(lastTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(navToHome2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        mainPanel.add(lastTransactions, "card2");

        jLabel13.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Fingerprint Authentication");

        jLabel15.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(143, 143, 152));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setLabelFor(home);
        jLabel15.setText("Place your finger to Login");
        jLabel15.setToolTipText("");

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Fingerprint-PNG-Images-HD.png"))); // NOI18N

        backBtnAuth.setBackground(new java.awt.Color(255, 0, 0));
        backBtnAuth.setForeground(new java.awt.Color(255, 255, 255));
        backBtnAuth.setText("< back");
        backBtnAuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnAuthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fingerPrintCheckPanelLayout = new javax.swing.GroupLayout(fingerPrintCheckPanel);
        fingerPrintCheckPanel.setLayout(fingerPrintCheckPanelLayout);
        fingerPrintCheckPanelLayout.setHorizontalGroup(
            fingerPrintCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(fingerPrintCheckPanelLayout.createSequentialGroup()
                .addGroup(fingerPrintCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fingerPrintCheckPanelLayout.createSequentialGroup()
                        .addGap(435, 435, 435)
                        .addGroup(fingerPrintCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(fingerPrintCheckPanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel15))))
                    .addGroup(fingerPrintCheckPanelLayout.createSequentialGroup()
                        .addGap(486, 486, 486)
                        .addComponent(backBtnAuth)))
                .addContainerGap(437, Short.MAX_VALUE))
        );
        fingerPrintCheckPanelLayout.setVerticalGroup(
            fingerPrintCheckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fingerPrintCheckPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel13)
                .addGap(64, 64, 64)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(backBtnAuth, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        mainPanel.add(fingerPrintCheckPanel, "card2");

        hiddenField.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hiddenField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(hiddenField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void navToLoginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navToLoginMouseClicked
        // TODO add your handling code here:

        navToPanel(this.Authentication);
    }//GEN-LAST:event_navToLoginMouseClicked

    private void createAcccountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAcccountBtnActionPerformed
        try {

//            Write in the database
            writeInDatabase(filePath);
        } catch (SQLException ex) {
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createAcccountBtnActionPerformed

    private void addFingerprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFingerprintActionPerformed

        // TODO add your handling code here:
        int ret = mfs100.Init();
        if (ret == 0) {

//            Capture the fingerprint
            captureFingerprint();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Oops..! Fingerprint not initialized\n" + "Error: " + mfs100.GetLastError() + " (" + String.valueOf(ret) + ")", appTitle, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addFingerprintActionPerformed

    private void userNameSignupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameSignupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameSignupActionPerformed

    private void viewBalanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBalanceBtnActionPerformed
        try {

            // Show the balance in a popup
            String balanceQuerry = "SELECT `balance` FROM `users` WHERE `name` = ? ";
            PreparedStatement balancePstmt = (PreparedStatement) conn.prepareStatement(balanceQuerry);

            balancePstmt.setString(1, this.hiddenField.getText());

            ResultSet rs = balancePstmt.executeQuery();
            int balance = 0;
            while (rs.next()) {
                balance = rs.getInt("balance");
            }

            JOptionPane.showMessageDialog(rootPane, "Your current balance : Rs " + balance, appTitle, JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {

            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_viewBalanceBtnActionPerformed

    private void navToSignupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navToSignupMouseClicked
        // TODO add your handling code here:
        navToPanel(this.Signup);
    }//GEN-LAST:event_navToSignupMouseClicked

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed

//      Check if the user exists 
        String querry = "SELECT `id` FROM `users` WHERE `name` = ?";
        try {
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(querry);
            pstmt.setString(1, this.loginName.getText());

            ResultSet result = pstmt.executeQuery();

            boolean count = false;
            while (result.next()) {
                count = true;
            }

//            If exists, check their fingerprint, Else show error message
            if (count) {

                navToPanel(this.fingerPrintCheckPanel);
                new java.util.Timer().schedule(
                        new java.util.TimerTask() {
                    @Override
                    public void run() {
                        timeout = 10000;
                        checkFingerprint();
                    }
                },
                        500
                );

            } else {
                JOptionPane.showMessageDialog(rootPane, "User not found", appTitle, JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_nextBtnActionPerformed

    private void loginNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loginNameActionPerformed

    private void withdrawAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_withdrawAmountActionPerformed

    private void navToHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navToHomeActionPerformed
        // TODO add your handling code here:

        navToHome();
    }//GEN-LAST:event_navToHomeActionPerformed

    private void withdrawConformedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawConformedBtnActionPerformed
        try {

//            Get the balance from the database and check if the balance is sufficient to withdraw,
//            If sufficient, then withdraw the amount and reflect it in database, 
//            Else, display the error message.
            int withDrawAmount = Integer.parseInt(this.withdrawAmount.getText());
            String querry = "SELECT `balance` FROM `users` WHERE `name` = ?";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(querry);

            pstmt.setString(1, this.hiddenField.getText());

            ResultSet rs = pstmt.executeQuery();
            int balance = 0;

            while (rs.next()) {

                balance = rs.getInt("balance");
            }

            if (balance < withDrawAmount) {
                JOptionPane.showMessageDialog(rootPane, "Insufficient balance", appTitle, JOptionPane.ERROR_MESSAGE);
            } else {
                balance = balance - withDrawAmount;

//                Withdrawal update on balance
                String Updatequerry = "UPDATE `users` SET `balance` = ? WHERE `name` = ?";
                PreparedStatement Updatepstmt = (PreparedStatement) conn.prepareStatement(Updatequerry);
                Updatepstmt.setInt(1, balance);
                Updatepstmt.setString(2, this.hiddenField.getText());

                Updatepstmt.execute();

//              Withdrawal update on transactions
                String Transactionquerry = "INSERT INTO `transactions`(`amount`, `datetime`, `action`, `fromName`) VALUES ( ?, ?, ?, ?)";
                PreparedStatement Transactionpstmt = (PreparedStatement) conn.prepareStatement(Transactionquerry);
                Transactionpstmt.setInt(1, withDrawAmount);
                Transactionpstmt.setString(2, cuurentDateTime());
                Transactionpstmt.setString(3, "withdrawal");
                Transactionpstmt.setString(4, this.hiddenField.getText());

                Transactionpstmt.execute();
                JOptionPane.showMessageDialog(rootPane, "Please collect your cash. Visit us again", appTitle, JOptionPane.OK_OPTION);
                navToPanel(this.home);

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Some error has occured, please try again", appTitle, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_withdrawConformedBtnActionPerformed

    private void navToSignup1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navToSignup1MouseClicked
        // TODO add your handling code here:

        navToHome();
    }//GEN-LAST:event_navToSignup1MouseClicked

    private void withdrawalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawalBtnActionPerformed
        // TODO add your handling code here:

//        Navigate to Withdrawal panel
        navToPanel(this.withDrawalPanel);
    }//GEN-LAST:event_withdrawalBtnActionPerformed

    private void transferAccountNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferAccountNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transferAccountNameActionPerformed

    private void navToHome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navToHome1ActionPerformed
        // TODO add your handling code here:
        navToHome();
    }//GEN-LAST:event_navToHome1ActionPerformed

    private void transferConformedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferConformedBtnActionPerformed
        try {
            // TODO add your handling code here:

//            Check if the balance is sufficient to transfer. If suffecient, Check if the transfer user exists.
//            If exists, then transfer the amount and reflect it in both the users entry and transcation history
            String transferAccountName = this.transferAccountName.getText();
            int transferAmount = Integer.parseInt(this.transferAmount.getText());

            String balanceQuerry = "SELECT `balance` FROM `users` WHERE `name` = ? ";
            PreparedStatement balancePstmt = (PreparedStatement) conn.prepareStatement(balanceQuerry);

            balancePstmt.setString(1, this.hiddenField.getText());

            ResultSet rs = balancePstmt.executeQuery();
            int balance = 0;
            while (rs.next()) {
                balance = rs.getInt("balance");
            }

            if (!checkUser(transferAccountName)) {
                JOptionPane.showMessageDialog(rootPane, "No Account named " + transferAccountName + " exists", appTitle, JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (transferAmount > balance) {
                JOptionPane.showMessageDialog(rootPane, "Insufficient balance", appTitle, JOptionPane.ERROR_MESSAGE);
                return;
            } else {

                balance = balance - transferAmount;
                String fromQuerry = "UPDATE `users` SET `balance` = ? WHERE `name` = ?";
                PreparedStatement fromPstmt = (PreparedStatement) conn.prepareStatement(fromQuerry);
                fromPstmt.setInt(1, balance);
                fromPstmt.setString(2, this.hiddenField.getText());
                fromPstmt.execute();

                String balanceToQuerry = "SELECT `balance` FROM `users` WHERE `name` = ? ";
                PreparedStatement balanceToPstmt = (PreparedStatement) conn.prepareStatement(balanceToQuerry);
                balanceToPstmt.setString(1, transferAccountName);
                ResultSet balanceToRs = balanceToPstmt.executeQuery();
                int balanceTo = 0;
                while (balanceToRs.next()) {
                    balanceTo = balanceToRs.getInt("balance");
                }
                balanceTo += transferAmount;

                String toQuerry = "UPDATE `users` SET `balance` = ? WHERE `name` = ?";
                PreparedStatement toPstmt = (PreparedStatement) conn.prepareStatement(toQuerry);
                toPstmt.setInt(1, balanceTo);
                toPstmt.setString(2, transferAccountName);
                toPstmt.execute();

                String transactionQuerry = "INSERT INTO `transactions`(`amount`, `datetime`, `fromName`, `toName`, `action`) VALUES ( ?, ?, ?, ?, ?)";
                PreparedStatement transactionPstmt = (PreparedStatement) conn.prepareStatement(transactionQuerry);
                transactionPstmt.setInt(1, transferAmount);
                transactionPstmt.setString(2, cuurentDateTime());
                transactionPstmt.setString(3, this.hiddenField.getText());
                transactionPstmt.setString(4, transferAccountName);
                transactionPstmt.setString(5, "transfer");
                transactionPstmt.execute();

                JOptionPane.showMessageDialog(rootPane, "Amount Transaction Completed", appTitle, JOptionPane.OK_OPTION);
                navToPanel(this.home);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_transferConformedBtnActionPerformed

    private void navToSignup2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navToSignup2MouseClicked
        // TODO add your handling code here:
        navToHome();

    }//GEN-LAST:event_navToSignup2MouseClicked

    private void transferAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transferAmountActionPerformed

    private void transferBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferBtnActionPerformed
        // TODO add your handling code here:
//        Navigate to Money Transfer panel        
        navToPanel(this.moneyTransferPanel);

    }//GEN-LAST:event_transferBtnActionPerformed

    private void navToHome2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navToHome2ActionPerformed
        // TODO add your handling code here:

        navToHome();
    }//GEN-LAST:event_navToHome2ActionPerformed

    private void backBtnAuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnAuthActionPerformed
        // TODO add your handling code here:
        timeout = 10;
        checkFingerprint();
    }//GEN-LAST:event_backBtnAuthActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:

        this.hiddenField.setText("");
        navToPanel(this.Authentication);
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void viewTransactionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTransactionBtnActionPerformed

//        Navigate to Last transaction panel        
        navToPanel(this.lastTransactions);

        updateLastTranscationTable();
    }//GEN-LAST:event_viewTransactionBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATMmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATMmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATMmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATMmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ATMmain().setVisible(true);
                } catch (ClassNotFoundException ex) {

                    Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private String WriteBytesToFile(String FileName, byte[] Bytes) {
        try {
            String FilePath = System.getProperty("user.dir");
            File file = new File(FilePath);
            if (!file.exists()) {
                file.mkdir();
            }
            FilePath += "\\" + FileName;
            FileOutputStream fos = new FileOutputStream(FilePath);
            fos.write(Bytes);
            fos.close();
            System.out.println(FilePath);
            return FilePath;
        } catch (Exception ex) {
            return "";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Authentication;
    private javax.swing.JLabel Heading;
    private javax.swing.JPanel Signup;
    private javax.swing.JButton addFingerprint;
    private javax.swing.JButton backBtnAuth;
    private javax.swing.JButton createAcccountBtn;
    private javax.swing.JPanel fingerPrintCheckPanel;
    private javax.swing.JLabel hiddenField;
    private javax.swing.JPanel home;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable lastTransactionTable;
    private javax.swing.JPanel lastTransactions;
    private javax.swing.JTextField loginName;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JLayeredPane mainPanel;
    private javax.swing.JPanel moneyTransferPanel;
    private javax.swing.JButton navToHome;
    private javax.swing.JButton navToHome1;
    private javax.swing.JButton navToHome2;
    private javax.swing.JLabel navToLogin;
    private javax.swing.JLabel navToSignup;
    private javax.swing.JLabel navToSignup1;
    private javax.swing.JLabel navToSignup2;
    private javax.swing.JButton nextBtn;
    private javax.swing.JTextField transferAccountName;
    private javax.swing.JTextField transferAmount;
    private javax.swing.JButton transferBtn;
    private javax.swing.JButton transferConformedBtn;
    private javax.swing.JTextField userNameSignup;
    private javax.swing.JButton viewBalanceBtn;
    private javax.swing.JButton viewTransactionBtn;
    private javax.swing.JLabel welcomeText;
    private javax.swing.JPanel withDrawalPanel;
    private javax.swing.JTextField withdrawAmount;
    private javax.swing.JButton withdrawConformedBtn;
    private javax.swing.JButton withdrawalBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void OnPreview(FingerData fd) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void OnCaptureCompleted(boolean bln, int i, String string, FingerData fd) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

//  Capture the fingerprint and store it in a temp file
    private void captureFingerprint() {

        if (this.setQuality() == false) {
            return;
        }

        if (this.setTimeOut() == false) {
            return;
        }
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                FingerData fingerData = new FingerData();
                int ret = mfs100.AutoCapture(fingerData, timeout, false, false);
                if (ret == 0) {

                    //  Capture the fingerprint and store it in a temp file
                    ISOTemplate = new byte[fingerData.ISOTemplate().length];
                    System.arraycopy(fingerData.ISOTemplate(), 0, ISOTemplate, 0, fingerData.ISOTemplate().length);
                    ANSITemplate = new byte[fingerData.ANSITemplate().length];
                    System.arraycopy(fingerData.ANSITemplate(), 0, ANSITemplate, 0, fingerData.ANSITemplate().length);
                    filePath = WriteBytesToFile("AnsiTemplate.ansi", fingerData.ANSITemplate());
                    JOptionPane.showMessageDialog(rootPane, "Fingerprint added successfully", appTitle, JOptionPane.OK_OPTION);
                    mfs100.Uninit();

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + mfs100.GetLastError() + " (" + String.valueOf(ret) + ")", appTitle, JOptionPane.ERROR_MESSAGE);
                    mfs100.Uninit();
                }
            }
        };

        trd = new Thread(runnable);
        trd.start();//To change body of generated methods, choose Tools | Templates.
    }

    private boolean setQuality() {
        try {
            quality = Integer.valueOf(60);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid quality value", appTitle, JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private boolean setTimeOut() {
        try {
            timeout = Integer.valueOf(10000);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid timeout value", appTitle, JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void navToHome() {
        navToPanel(this.home);
    }

    private void initDatabase() throws ClassNotFoundException, SQLException {

        Class.forName("com.mysql.jdbc.Driver");
        conn = DriverManager.getConnection("jdbc:mysql://localhost/atm", "root", "");
        System.out.println("Database is connected");
    }

    private void writeInDatabase(String filePath) throws SQLException, FileNotFoundException {

//        Check if the user already exists
//      If exist, show the error message
        if (checkUser(this.userNameSignup.getText().toString())) {
            JOptionPane.showMessageDialog(rootPane, "User already exists", appTitle, JOptionPane.ERROR_MESSAGE);
        } else {

//          Else, do register in the database with the temporarly stored fingerprint file  
            String querry = "INSERT INTO `users`(`name`, `fingerprint`) VALUES (?, ?)";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(querry);

            File file = new File(filePath);
            FileInputStream input = new FileInputStream(file);

            pstmt.setString(1, this.userNameSignup.getText().toString());
            pstmt.setBinaryStream(2, input, (int) file.length());

            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(rootPane, "Account added successfully", appTitle, JOptionPane.OK_OPTION);
        }
    }

    private boolean navToPanel(JPanel jpanel) {

        this.mainPanel.removeAll();
        this.mainPanel.add(jpanel);
        this.mainPanel.repaint();
        this.mainPanel.revalidate();

        return true;
    }

//  Check the fingerprint of the user for Login
    private void checkFingerprint() {

        mfs100.Init();
        FingerData fingerData = new FingerData();
        int ret = mfs100.AutoCapture(fingerData, timeout, false, false);

        try {
            if (ret == 0) {

//                Capture the fingerprint and compare with the fingerprint in the database
                String querry = "SELECT `fingerprint` FROM `users` WHERE `name` = ?";
                PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(querry);
                pstmt.setString(1, this.loginName.getText());

                ResultSet rs = pstmt.executeQuery();

                File file = new File(filePath);
                FileOutputStream output = new FileOutputStream(file);

                System.out.println("Writing to file " + file.getAbsolutePath());
                while (rs.next()) {
                    InputStream input = rs.getBinaryStream("fingerprint");
                    byte[] buffer = new byte[1024];
                    while (input.read(buffer) > 0) {
                        output.write(buffer);
                    }
                }

                FileInputStream fin = new FileInputStream(file);

                byte fingerprintByte[] = new byte[(int) file.length()];
                fin.read(fingerprintByte);

                int score = 0;
                score = mfs100.MatchANSI(fingerData.ANSITemplate(), fingerprintByte);
                if (score >= 14000) {

//                    If matched, login them, else show them error message 
                    JOptionPane.showMessageDialog(rootPane, "Finger Matched With Score " + String.valueOf(score), appTitle, JOptionPane.INFORMATION_MESSAGE);
                    navToPanel(this.home);
                    this.welcomeText.setText("Welcome, " + this.loginName.getText());
                    this.hiddenField.setText(this.loginName.getText());
                } else if (score >= 0 && score < 14000) {
                    JOptionPane.showMessageDialog(rootPane, "Finger Not Matched", appTitle, JOptionPane.INFORMATION_MESSAGE);
                    navToPanel(this.Authentication);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + mfs100.GetLastError() + " (" + String.valueOf(ret) + ")", appTitle, JOptionPane.ERROR_MESSAGE);
                    navToPanel(this.Authentication);
                }
            } else {
//                JOptionPane.showMessageDialog(rootPane, "Error: " + mfs100.GetLastError() + " (" + String.valueOf(ret) + ")", appTitle, JOptionPane.ERROR_MESSAGE);
                navToPanel(this.Authentication);
            }
            mfs100.Uninit();

        } catch (SQLException ex) {
            mfs100.Uninit();
            JOptionPane.showMessageDialog(rootPane, "Something is wrong, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            navToPanel(this.Authentication);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            mfs100.Uninit();
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            navToPanel(this.Authentication);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            mfs100.Uninit();
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            navToPanel(this.Authentication);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean checkUser(String name) {

        String querry = "SELECT `id` FROM `users` WHERE `name` = ?";

        try {
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(querry);
            pstmt.setString(1, name);

            ResultSet rs = pstmt.executeQuery();
            int count = 0;
            while (rs.next()) {
                count++;
            }

            if (count > 0) {
                return true;
            } else {
                return false;
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
            return true;
        }

    }

    private String cuurentDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();

        return dateFormat.format(date);
    }

    private void updateLastTranscationTable() {

        DefaultTableModel model = (DefaultTableModel) this.lastTransactionTable.getModel();
        model.setRowCount(0);

        try {
            String querry = "SELECT * FROM `transactions` WHERE `toName` = ? OR `fromName` = ?";
            PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(querry);

            pstmt.setString(1, this.hiddenField.getText());
            pstmt.setString(2, this.hiddenField.getText());

            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {

                System.out.println(rs.getString("action"));
                model.addRow(new Object[]{rs.getString("action"), rs.getInt("amount"),
                    rs.getString("datetime"), rs.getString("fromName"), rs.getString("toName")});

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Some error has been occured, please try again later", appTitle, JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ATMmain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
